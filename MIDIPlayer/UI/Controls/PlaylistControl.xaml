<StackPanel x:Name="panel" x:Class="Hscm.UI.PlaylistControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Hscm.UI"
            xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
            xmlns:cmd="http://www.galasoft.ch/mvvmlight"
            xmlns:UI="clr-namespace:Hscm.UI" xmlns:componentmodel="clr-namespace:System.ComponentModel;assembly=WindowsBase"
            mc:Ignorable="d" Background="#FFF0F6FF">

    
    <StackPanel.Resources >

        <CollectionViewSource x:Key="cvs" Source="{Binding Items}" Filter="CollectionViewSource_Filter" x:Name="collectionViewSrc" >
            <CollectionViewSource.GroupDescriptions>

                <PropertyGroupDescription PropertyName="FolderName" />

            </CollectionViewSource.GroupDescriptions>


            <CollectionViewSource.SortDescriptions>

                <!-- Requires 'xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase"' declaration. -->
                <componentmodel:SortDescription PropertyName="Index"/>

            </CollectionViewSource.SortDescriptions>

        </CollectionViewSource>

        <UI:BoolToVisibilityConverter
            x:Key="BoolToVisibilityConverter"
            FalseValue="Collapsed"
            TrueValue="Visible" />

        <UI:InverseBoolToVisibilityConverter
            x:Key="InverseBoolToVisibilityConverter"
            FalseValue="Collapsed"
            TrueValue="Visible" />

        <UI:InverseBoolToVisibilityConverter
            x:Key="InverseBoolToVisibilityConverter2"
            FalseValue="Visible"
            TrueValue="Collapsed" />

        <Style x:Key="SeparatorStyle1" TargetType="{x:Type Separator}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
            <Setter Property="Margin" Value="0,2,0,2"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Separator}">
                        <Border BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" BorderThickness="1" Background="{TemplateBinding Background}" Height="1" SnapsToDevicePixels="true"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


    </StackPanel.Resources>

    <StackPanel Orientation="Horizontal">
        <Image Source="../../Images/icons8-playlist-50.png" Height="25" Margin="5,0,0,0"/>

        <Label 
            FontSize="11"
            Foreground="#FF1D2F3D"
        FontWeight="SemiBold"
            Content="Playlist — "></Label>

        <Label 
            Margin="-8,0,0,0"
            FontSize="11"
            Foreground="#FF1D2F3D"
        FontWeight="SemiBold"
            Content="{Binding Title}"></Label>
    </StackPanel>

    <Border
                            Margin="0,5,0,0"
                BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" 
                BorderThickness="1"
                HorizontalAlignment="Stretch"
                Height="1" 
                VerticalAlignment="Top"/>


    <ToolBar
                  Margin="0,0,-13,0"
                ToolBar.OverflowMode="Never"
               ToolBarTray.IsLocked="True"
                HorizontalAlignment="Left"
                VerticalAlignment="Top"
                Background="#FFF0F6FF">

        <Button
                    Height="30"
                    Command="{Binding NewCommand }"
                    ToolTip="New playlist">
            <Image Source="/Images/icons8-audio-file-50.png" />
        </Button>

        <Button
                    Height="30"
                    Command="{Binding OpenCommand }"
                    ToolTip="Open playlist">
            <Image Source="/Images/open_playlist.png" />
        </Button>

        <Separator/>


        <Button
                    Height="30"
                    Command="{Binding AddFilesCommand }"
                    ToolTip="Add MIDIs">
            <Image Source="/Images/add-music-file.png" />
        </Button>


        <Button
                    Height="30"
                    Command="{Binding AddDirectoryCommand }"
                    ToolTip="Add folder">
            <Image Source="/Images/add-music-folder.png" />
        </Button>



        <Separator/>


        <Button
                        Visibility="{Binding HasItems, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding SaveCommand }"
                    ToolTip="Save playlist">
            <Image Source="/Images/icons8-save-48.png" />
        </Button>

        <Button
                                Visibility="{Binding HasItems, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding SaveAsCommand }"
                    ToolTip="Save playlist as">
            <Image Source="/Images/icons8-save-as-48.png" />
        </Button>

        <Separator/>
        

        <Button
            Visibility="{Binding RowsSelected, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding RemoveCommand }"
                    ToolTip="Remove selected">
            <Image Source="/Images/icons8-delete-48.png" />
        </Button>

        <Button
                  Visibility="{Binding HasItems, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding RemoveAllCommand }"
                    ToolTip="Remove all">
            <Image Source="/Images/icons8-trash-can-48.png" />
        </Button>

        <ToggleButton
                    IsChecked="{Binding SettingsVisible}"
                    Height="30"
                    Command="{Binding ToggleSettingsCommand}"
                    ToolTip="Show/hide playlist settings">
            <Image Source="/Images/icons8-tune-48.png" />
        </ToggleButton>

        <StackPanel>
            
        </StackPanel>
        <ToggleButton
             Visibility="{Binding HasItems, Converter={StaticResource BoolToVisibilityConverter}}"
                    IsChecked="{Binding IsGroupingEnabled}"
                    Height="30"
                    Command="{Binding ToggleGroupingCommand }"
                    ToolTip="Toggle Grouping">
            <Image Source="/Images/icons8-hierarchy-48.png" />
        </ToggleButton>

        <!--<Button
                    Height="30"
                    Command="{Binding MoveDownCommand }"
                    ToolTip="Move Down">
            <Image Source="/Images/icons8-down-48.png" />
        </Button>

        <Button
                    Height="30"
                    Command="{Binding MoveUpCommand }"
                    ToolTip="Move Up">
            <Image Source="/Images/icons8-up-48.png" />
        </Button>-->
        
        <Button
                             Visibility="{Binding ShowGroupingButtons, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding ExpandAllCommand }"
                    ToolTip="Expand All">
            <Image Source="/Images/icons8-expand-48.png" />
        </Button>

        <Button
                             Visibility="{Binding ShowGroupingButtons, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding CollapseAllCommand }"
                    ToolTip="Collapse All">
            <Image Source="/Images/icons8-collapse-48.png" />
        </Button>


            <Button 
                             Visibility="{Binding HasItems, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding ShowFilterCommand }"
                    ToolTip="Filter playlist to show only MIDIs matching text">
                <Image Source="/Images/icons8-filter-48.png" />
            </Button>


        <Button
                 Visibility="{Binding IsFilterVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding ClearFilterCommand }"
                    ToolTip="Clear playlist filter">
            <Image Source="/Images/icons8-clear-filter-48.png" />
        </Button>




    </ToolBar>

    <StackPanel HorizontalAlignment="Left" VerticalAlignment="Top" Margin="5,5,0,5"  Visibility="{Binding SettingsVisible, Converter={StaticResource BoolToVisibilityConverter}}">

        <local:PlaylistSettingsControl 
                    x:Name="playlistSettingsControl" />
        
    </StackPanel>



    <TextBox
        Margin="0,0,0,0"
                    Visibility="{Binding IsFilterVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                    ToolTip="Filter Playlist"
                    Text="{Binding FilterText}"
                    x:Name="filter"
                                             FontSize="10"
                                Foreground="#FF1D2F3D" TextChanged="filterText_TextChanged" GotFocus="filterText_GotFocus" PreviewMouseDown="filterText_PreviewMouseDown" />


        <DataGrid
Height="500"
          Margin="0,0,0,0"
        FontSize="10"
            VerticalAlignment="Stretch" 
            HorizontalAlignment="Stretch"
                            x:Name="playlist"
                            EnableRowVirtualization="True"
                            EnableColumnVirtualization="True"
                            VirtualizingPanel.VirtualizationMode="Recycling"
                            VirtualizingPanel.IsVirtualizingWhenGrouping="True"
                            CanUserResizeColumns="True"
                            HeadersVisibility="Column"
                            CanUserReorderColumns="False"
                            CanUserResizeRows="False"
                            SelectionMode="Extended"
                            IsReadOnly="True"
                            AutoGenerateColumns="False"
                     Background="#FF151F27"
                            Foreground="#E0727683"
                            GridLinesVisibility="None"
                            ItemsSource="{Binding Source={StaticResource cvs}}"
 SelectionChanged="DataGrid_SelectionChanged"
        Sorting="playlist_Sorting"
            
            ScrollViewer.IsDeferredScrollingEnabled="True"
             ScrollViewer.CanContentScroll="True" 
ScrollViewer.VerticalScrollBarVisibility="Visible"
ScrollViewer.HorizontalScrollBarVisibility="Auto">

            <DataGrid.GroupStyle>
                <GroupStyle>
                    <GroupStyle.ContainerStyle>
                        <Style TargetType="{x:Type GroupItem}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type GroupItem}">
                                        <Expander IsExpanded="True" x:Name="expander">


                                            
                                        <Expander.Header>

                                                <StackPanel Orientation="Horizontal">

                                
                                                    <Image Source="../../Images/icons8-music-folder-48.png" Width="20"></Image>

                                                <StackPanel Orientation="Horizontal" Margin="2,4,0,0">
                                                    <TextBlock Text="{Binding Name}" Foreground="#60F0F6FF" />
                                                    <TextBlock Text=" (" Foreground="#60F0F6FF" />
                                                    <TextBlock Text="{Binding ItemCount}" Foreground="#60F0F6FF"/>
                                                    <TextBlock Text=" songs" Foreground="#60F0F6FF"/>
                                                    <TextBlock Text=")" Foreground="#60F0F6FF" />     
                                                </StackPanel>

                                                <StackPanel.ContextMenu>
                                                    <ContextMenu >
                                                        <ContextMenu.Items>

                                                            <MenuItem 
                                                        Click="GroupItemRemoveMenu_Click"
>
                                                                <MenuItem.Header>
                                                                    <TextBlock>
                                                                        Remove
                                                                    </TextBlock>
                                                                </MenuItem.Header>
                                                            </MenuItem>
                                                        </ContextMenu.Items>
                                                    </ContextMenu>
                                                </StackPanel.ContextMenu>
                              
                                            </StackPanel>

                                            </Expander.Header>

                                            <ItemsPresenter/>

                                            <Expander.Style>
                                                <Style TargetType="Expander">
                                                    <Setter Property="IsExpanded" Value="False"></Setter>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type Expander}">
                                                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                                                    <DockPanel>
                                                                        <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="#FF727683" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                                                            <ToggleButton.Template>
                                                                                <ControlTemplate TargetType="{x:Type ToggleButton}">

                                                                                    <ContentPresenter Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>

                                                                                </ControlTemplate>
                                                                            </ToggleButton.Template>
                                                                        </ToggleButton>
                                                                        <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                                    </DockPanel>
                                                                </Border>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsExpanded" Value="true">
                                                                        <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                                                    </Trigger>
                                                                    <Trigger Property="ExpandDirection" Value="Right">
                                                                        <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                                                                        <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                                                        <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                                                                    </Trigger>
                                                                    <Trigger Property="ExpandDirection" Value="Up">
                                                                        <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                                                                        <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                                                        <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                                                                    </Trigger>
                                                                    <Trigger Property="ExpandDirection" Value="Left">
                                                                        <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                                                                        <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                                                        <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsEnabled" Value="false">
                                                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Name}" Value="Title" >
                                                            <Setter Property="IsExpanded" Value="True"></Setter>
                                                            <Setter Property="IsEnabled" Value="False" />
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Expander.Style>
                                        </Expander>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </GroupStyle.ContainerStyle>
                </GroupStyle>
            </DataGrid.GroupStyle>

            <DataGrid.ContextMenu>
                <ContextMenu>
                    <ContextMenu.Items>

                        <!--<MenuItem 
                        Visibility="{Binding Menu.ShowPlay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}" 
                        Command="{Binding MenuPlayCommand }"
                         CommandParameter="{Binding  Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}}">
                            <MenuItem.Header>
                                <TextBlock>
                                <Run FontWeight="Bold">
                                    Play
                                </Run>
                                </TextBlock>
                            </MenuItem.Header>
                        </MenuItem>-->

                        <Separator Style="{DynamicResource SeparatorStyle1}"/>

                        <MenuItem 
                        Visibility="{Binding Menu.ShowPlay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}" 
                        Header="Load MIDI Settings" 
                        Command="{Binding LoadCurrentSongSettingsCommand }" />

                        <MenuItem 
                        Visibility="{Binding Menu.ShowPlay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}" 
                        Header="Load MIDI Settings From..." 
                        Command="{Binding LoadSongSettingsCommand }" />

                        <MenuItem 
                        Visibility="{Binding Menu.ShowPlay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}" 
                        Header="Save MIDI Settings As..." 
                        Command="{Binding SaveSongSettingsCommand }" />

                        <Separator Style="{DynamicResource SeparatorStyle1}"/>

                        <!--<MenuItem 
                        Visibility="{Binding Menu.ShowRefresh, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}" 
                        Header="Refresh Folder" 
                        Command="{Binding RefreshCommand }" />

                        <Separator Style="{DynamicResource SeparatorStyle1}"/>-->


                        <MenuItem 
                        Visibility="{Binding Menu.ShowOpen, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}" 
                        Header="Open Playlist" 
                        Command="{Binding OpenCommand }" />

                        <MenuItem 
                        Visibility="{Binding Menu.ShowSave, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}" 
                        Header="Save Playlist" 
                        Command="{Binding SaveCommand }" />

                        <MenuItem 
                        Visibility="{Binding Menu.ShowSaveAs, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}" 
                        Header="Save Playlist As..." 
                        Command="{Binding SaveAsCommand }" />

                        <Separator Style="{DynamicResource SeparatorStyle1}"/>

                        <!--<MenuItem 
                        Visibility="{Binding Menu.ShowOpen, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}" 
                        Header="Open Playlist Settings" 
                        Command="{Binding OpenPlaylistSettingsCommand }" />


                        <MenuItem 
                        Visibility="{Binding Menu.ShowSave, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}" 
                        Header="Save Playlist Settings As..." 
                        Command="{Binding SavePlaylistSettingsCommand }" />

                        <Separator Style="{DynamicResource SeparatorStyle1}"/>-->


                        <MenuItem 
                        Visibility="{Binding Menu.ShowAddFiles, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}" 
                        Header="Add Files" 
                        Command="{Binding AddFilesCommand }" />

                        <MenuItem 
                        Visibility="{Binding Menu.ShowAddDirectory, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}" 
                        Header="Add Folder" 
                        Command="{Binding AddDirectoryCommand }" />

                        <Separator Style="{DynamicResource SeparatorStyle1}"/>


                        <MenuItem 
                        Visibility="{Binding Menu.ShowRemove, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}" 
                        Header="Remove" Command="{Binding RemoveCommand }" />

                        <MenuItem 
                         Visibility="{Binding Menu.ShowRemoveAll, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}" 
                        Header="Remove All" Command="{Binding RemoveAllCommand }" />

                    </ContextMenu.Items>
                </ContextMenu>
            </DataGrid.ContextMenu>


            <!--<DataGrid.InputBindings>
            <MouseBinding Gesture="LeftDoubleClick" Command="{Binding PlayFileCommand}" />
        </DataGrid.InputBindings>-->


            <DataGrid.Resources>
                <ResourceDictionary>
                    <Style x:Key="{x:Type DataGridColumn}" TargetType="{x:Type DataGridColumn}">

                    </Style>

                    <Style x:Key="{x:Type DataGridCell}" TargetType="{x:Type DataGridCell}">
                        <Setter Property="Background" Value="{x:Null}" />
                        <Setter Property="Margin" Value="5,2,0,0"></Setter>
                        <Setter Property="Padding" Value="0,0,0,0"></Setter>
                    <Setter Property="BorderBrush" Value="{x:Null}" />
                    <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Foreground" Value="#90F0F6FF"></Setter>
                                <Setter Property="Background" Value="{x:Null}" />
                                <Setter Property="BorderBrush" Value="{x:Null}" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>


                    <Style TargetType="{x:Type DataGridRow}">

                    <!--<Setter Property="ToolTip" Value="{Binding ToolTipText}"></Setter>-->
                    <Setter Property="Foreground" Value="#d0969cb0"></Setter>
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"></Setter>
                        <Setter Property="Margin" Value="0,2,0,0"></Setter>
                        <Setter Property="Padding" Value="0,0,0,0"></Setter>
                        <Setter Property="Height" Value="25"></Setter>
                        <Setter Property="Background" Value="{x:Null}" />
                        <Setter Property="BorderBrush" Value="{x:Null}" />
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="#405E83A0" />
                                <Setter Property="BorderBrush" Value="{x:Null}" />
                            </Trigger>
                            <DataTrigger Binding="{Binding IsPlaying}" Value="True">
                                <Setter Property="FontWeight" Value="Bold"></Setter>
                                <Setter Property="Foreground" Value="#FF727683"></Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>

                    <!--<Style TargetType="DataGridCell" x:Key="ActiveCellStyle">
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="#FFF0F6FF"></Setter>
                        </Trigger>
                    </Style.Triggers>
                </Style>-->

                </ResourceDictionary>
            </DataGrid.Resources>

            <DataGrid.Columns>


            <DataGridTemplateColumn Width="20">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <Image Margin="0,-7,0,0" Source="../../Images/icons8-play-50.png" Height="18" Width="20"
                               Visibility="{Binding IsPlaying, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}"/>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>

            <DataGridTextColumn
                                     CanUserSort="True"
                                    SortDirection="Ascending"
                                     IsReadOnly="True"
                                    Binding="{Binding No}"
                                    Header="#">
                    <DataGridTextColumn.HeaderTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding DataContext.Header, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}}"/>
                        </DataTemplate>
                    </DataGridTextColumn.HeaderTemplate>
                </DataGridTextColumn>



                <DataGridTemplateColumn CanUserSort="True"
                                     IsReadOnly="True"
                                    SortMemberPath="FileName"
                                    SortDirection="Ascending"
                                    Header="Title">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal" Margin="-40,0,0,0">
                                <Image Margin="0,-6,0,0" Source="{Binding ImagePath}" Height="13"></Image>
                                <TextBlock Margin="10,0,0,0" Text="{Binding FileName}"></TextBlock>
                            </StackPanel>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <!--<DataGridComboBoxColumn
                    Header="Note"
                    ItemsSource="{Binding Path=Notes, RelativeSource={RelativeSource AncestorType={x:Type local:EditorWindow}}}"
                    SelectedValueBinding="{Binding Note, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" >
                </DataGridComboBoxColumn>-->

                <!--<DataGridTextColumn
                                    CanUserSort="True"
                                    SortDirection="Ascending"
                                     IsReadOnly="True"
                                    Binding="{Binding FolderPath}"
                                    ClipboardContentBinding="{x:Null}"
                                    Header="Folder" />-->

                <!--<DataGridTextColumn
                                     CanUserSort="False"
                                     IsReadOnly="True"
                                    Binding="{Binding TotalNotes}"
                                    Foreground="#E0727683"
                                    ClipboardContentBinding="{x:Null}"
                                    Header="Notes" />-->

                <!--<DataGridTextColumn
                                    CanUserSort="True"
                                    SortDirection="Ascending"
                                     IsReadOnly="True"
                                    Binding="{Binding Duration}"
                                    ClipboardContentBinding="{x:Null}"
                                    Header="Length" />-->

            </DataGrid.Columns>


            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseDoubleClick" >
                    <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding PlayCommand}"/>
                </i:EventTrigger>

                <i:EventTrigger EventName="SelectionChanged">
                    <cmd:EventToCommand PassEventArgsToCommand="True"
                                    Command="{Binding SelectedRowsChangedCommand}"
                                    CommandParameter="{Binding Path=SelectedItems }"/>
                </i:EventTrigger>

            </i:Interaction.Triggers>

        </DataGrid>

</StackPanel>
