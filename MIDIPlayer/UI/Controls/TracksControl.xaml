<StackPanel x:Class="Hscm.UI.TracksControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Hscm.UI"
            xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
            xmlns:cmd="http://www.galasoft.ch/mvvmlight"
            xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
            mc:Ignorable="d" d:DesignWidth="800"   Background="#FFF0F6FF">


    
    <StackPanel.Resources>
        
 
        
        <local:BoolToVisibilityConverter
            x:Key="BoolToVisibilityConverter"
            FalseValue="Collapsed"
            TrueValue="Visible" />

        <local:InverseBoolToVisibilityConverter
            x:Key="InverseBoolToVisibilityConverter"
            FalseValue="Collapsed"
            TrueValue="Visible" />

        <SolidColorBrush x:Key="ToolBarHorizontalBackground" Color="#FFEEF5FD"/>
        <SolidColorBrush x:Key="ToolBarToggleButtonVerticalBackground" Color="#FFEEF5FD"/>
        <SolidColorBrush x:Key="ToolBarButtonHover" Color="#210080FF"/>
        <SolidColorBrush x:Key="ToolBarGripper" Color="#FF6D6D6D"/>
        <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="{StaticResource ToolBarToggleButtonVerticalBackground}"/>
            <Setter Property="MinHeight" Value="0"/>
            <Setter Property="MinWidth" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="Bd" SnapsToDevicePixels="true" CornerRadius="0,0,3,3" Background="{TemplateBinding Background}">
                            <Canvas Width="7" VerticalAlignment="Bottom" SnapsToDevicePixels="true" Margin="2,7,2,2" Height="6" HorizontalAlignment="Right">
                                <Path Data="M 1.5 1 L 1.5 6" Stroke="White"/>
                                <Path Data="M 0.5 0 L 0.5 5" Stroke="{TemplateBinding Foreground}"/>
                                <Path Data="M 3.5 0.5 L 7 3.5 L 4 6.5 Z" Fill="White"/>
                                <Path Data="M 3 -0.5 L 6 2.5 L 3 5.5 Z" Fill="{TemplateBinding Foreground}"/>
                            </Canvas>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{StaticResource ToolBarGripper}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <SolidColorBrush x:Key="ToolBarVerticalBackground" Color="#FFEEF5FD"/>
        <SolidColorBrush x:Key="ToolBarToggleButtonHorizontalBackground" Color="#FFEEF5FD"/>
        <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="{StaticResource ToolBarToggleButtonHorizontalBackground}"/>
            <Setter Property="MinHeight" Value="0"/>
            <Setter Property="MinWidth" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="Bd" SnapsToDevicePixels="true" CornerRadius="0,3,3,0" Background="{TemplateBinding Background}">
                            <Canvas Width="6" VerticalAlignment="Bottom" SnapsToDevicePixels="true" Margin="7,2,2,2" Height="7" HorizontalAlignment="Right">
                                <Path Data="M 1 1.5 L 6 1.5" Stroke="White"/>
                                <Path Data="M 0 0.5 L 5 0.5" Stroke="{TemplateBinding Foreground}"/>
                                <Path Data="M 0.5 4 L 6.5 4 L 3.5 7 Z" Fill="White"/>
                                <Path Data="M -0.5 3 L 5.5 3 L 2.5 6 Z" Fill="{TemplateBinding Foreground}"/>
                            </Canvas>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{StaticResource ToolBarGripper}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <SolidColorBrush x:Key="ToolBarMenuBorder" Color="#FFB6BDC5"/>
        <SolidColorBrush x:Key="ToolBarSubMenuBackground" Color="#FFEEF5FD"/>
        <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}" Background="Transparent">
                            <Rectangle>
                                <Rectangle.Fill>
                                    <DrawingBrush ViewboxUnits="Absolute" ViewportUnits="Absolute" Viewport="0,0,4,4" Viewbox="0,0,4,4" TileMode="Tile">
                                        <DrawingBrush.Drawing>
                                            <DrawingGroup>
                                                <GeometryDrawing Brush="White" Geometry="M 1 1 L 1 3 L 3 3 L 3 1 z"/>
                                                <GeometryDrawing Brush="{StaticResource ToolBarGripper}" Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z"/>
                                            </DrawingGroup>
                                        </DrawingBrush.Drawing>
                                    </DrawingBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Cursor" Value="SizeAll"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ToolBarMainPanelBorderStyle" TargetType="{x:Type Border}">
            <Setter Property="Margin" Value="0,0,11,0"/>
            <Setter Property="CornerRadius" Value="3,3,3,3"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
                    <Setter Property="CornerRadius" Value="0,0,0,0"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="ToolBarStyle1" TargetType="{x:Type ToolBar}">
            <Setter Property="Background" Value="{StaticResource ToolBarHorizontalBackground}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToolBar}">
                        <Grid x:Name="Grid" Margin="3,1,1,1" SnapsToDevicePixels="true">
                            <Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
                                <ToggleButton Visibility="Collapsed" x:Name="OverflowButton" ClickMode="Press" FocusVisualStyle="{x:Null}" IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{TemplateBinding HasOverflowItems}" Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}"/>
                                <Popup x:Name="OverflowPopup" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" StaysOpen="false">
                                    <Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                                        <Border x:Name="ToolBarSubMenuBorder" BorderBrush="{StaticResource ToolBarMenuBorder}" BorderThickness="1" Background="{StaticResource ToolBarSubMenuBackground}" RenderOptions.ClearTypeHint="Enabled">
                                            <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" KeyboardNavigation.DirectionalNavigation="Cycle" FocusVisualStyle="{x:Null}" Focusable="true" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle" WrapWidth="200"/>
                                        </Border>
                                    </Themes:SystemDropShadowChrome>
                                </Popup>
                            </Grid>
                            <Border x:Name="MainPanelBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" Style="{StaticResource ToolBarMainPanelBorderStyle}">
                                <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                    <Thumb x:Name="ToolBarThumb" Margin="-3,-1,0,0" Padding="6,5,1,6" Style="{StaticResource ToolBarThumbStyle}" Width="10"/>
                                    <ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center" Margin="4,0,4,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                    <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" Margin="0,1,2,2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </DockPanel>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsOverflowOpen" Value="true">
                                <Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="false"/>
                            </Trigger>
                            <Trigger Property="Header" Value="{x:Null}">
                                <Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="ToolBarTray.IsLocked" Value="true">
                                <Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="HasDropShadow" SourceName="OverflowPopup" Value="true">
                                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                                <Setter Property="SnapsToDevicePixels" TargetName="Shdw" Value="true"/>
                                <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
                            </Trigger>
                            <Trigger Property="Orientation" Value="Vertical">
                                <Setter Property="Margin" TargetName="Grid" Value="1,3,1,1"/>
                                <Setter Property="Style" TargetName="OverflowButton" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}"/>
                                <Setter Property="Height" TargetName="ToolBarThumb" Value="10"/>
                                <Setter Property="Width" TargetName="ToolBarThumb" Value="Auto"/>
                                <Setter Property="Margin" TargetName="ToolBarThumb" Value="-1,-3,0,0"/>
                                <Setter Property="Padding" TargetName="ToolBarThumb" Value="5,6,6,1"/>
                                <Setter Property="Margin" TargetName="ToolBarHeader" Value="0,0,0,4"/>
                                <Setter Property="Margin" TargetName="PART_ToolBarPanel" Value="1,0,2,2"/>
                                <Setter Property="DockPanel.Dock" TargetName="ToolBarThumb" Value="Top"/>
                                <Setter Property="DockPanel.Dock" TargetName="ToolBarHeader" Value="Top"/>
                                <Setter Property="HorizontalAlignment" TargetName="OverflowGrid" Value="Stretch"/>
                                <Setter Property="VerticalAlignment" TargetName="OverflowGrid" Value="Bottom"/>
                                <Setter Property="Placement" TargetName="OverflowPopup" Value="Right"/>
                                <Setter Property="Margin" TargetName="MainPanelBorder" Value="0,0,0,11"/>
                                <Setter Property="Background" Value="{StaticResource ToolBarVerticalBackground}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="GridButtonStyle" TargetType="Button">
            <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
            <Setter Property="FontSize" Value="14.667" />
            <Setter Property="FontFamily" Value="Segoe UI" />
            <Setter Property="Padding" Value="2" />
            <Setter Property="MinHeight" Value="15" />
            <Setter Property="MinWidth" Value="15" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="Fill">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource TextBoxSelectionForegroundBrush}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <!--<ObjectAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="Stroke">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource ButtonHoverBorderBrush}" />
                                            </ObjectAnimationUsingKeyFrames>-->
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="Fill">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource TextBoxSelectionForegroundBrush}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="Stroke">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource ButtonPressedBorderBrush}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <!--<ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Foreground" Storyboard.TargetName="ContentControl">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource LightForegroundBrush}" />
                                            </ObjectAnimationUsingKeyFrames>-->
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="DisabledVisualElement">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <Visibility>Visible</Visibility>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <!--<VisualStateGroup x:Name="FocusStates">
                                    <VisualState x:Name="Focused">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="FocusedVisualElement">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <Visibility>Visible</Visibility>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unfocused" />
                                </VisualStateGroup>-->
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle x:Name="Bd"  StrokeThickness="1" />
                            <ContentControl x:Name="ContentControl" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ContentPresenter x:Name="contentPresenter" />
                            </ContentControl>
                            <!--<Rectangle x:Name="FocusedVisualElement" Stroke="{StaticResource ButtonPressedBorderBrush}" Visibility="Collapsed" StrokeThickness="2" />-->
                            <Rectangle x:Name="HoverVisualElement" Fill="{DynamicResource TextBoxSelectionForegroundBrush}" Visibility="Collapsed" StrokeThickness="1" />
                            <!--<Rectangle x:Name="DisabledVisualElement" Fill="{StaticResource DisabledVisualElement}" Visibility="Collapsed" />-->
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </StackPanel.Resources>

    <StackPanel Visibility="{Binding IsVisible, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}">


        <StackPanel Orientation="Horizontal">
            <Image Source="../../Images/icons8-deezer-50.png" Height="25" Margin="5,0,0,0"/>

            <Label 
            FontSize="11"
            Foreground="#FF1D2F3D"
        FontWeight="SemiBold"
            Content="Tracks"></Label>
        </StackPanel>

        <Border
                            Margin="0,5,0,0"
                BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" 
                BorderThickness="1"
                HorizontalAlignment="Stretch"
                Height="1" 
                VerticalAlignment="Top"/>

        <ToolBar
                  Margin="0,0,-13,0"
                ToolBar.OverflowMode="Never"
               ToolBarTray.IsLocked="True"
                HorizontalAlignment="Left"
                VerticalAlignment="Top"
                Background="#FFF0F6FF">


            <Button
                Visibility="{Binding ShowMute, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding MuteCommand }"
                    ToolTip="Mute">
                <Image Source="/Images/icons8-mute-48.png" />
            </Button>


            <Button
                       Visibility="{Binding ShowUnmute, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding UnmuteCommand }"
                    ToolTip="Unmute">
                <Image Source="/Images/icons8-speaker-48.png" />
            </Button>


            <Button
                     Visibility="{Binding ShowMuteAll, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding MuteAllCommand }"
                    ToolTip="Mute all">
                <Image Source="/Images/icons8-mute-all-48.png" />
            </Button>


            <Button
                     Visibility="{Binding ShowUnmuteAll, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding UnmuteAllCommand }"
                    ToolTip="Unmute all">
                <Image Source="/Images/icons8-unmute-all-48.png" />
            </Button>

            <Separator/>


            <Button
                       Visibility="{Binding ShowClone, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding DuplicateCommand}"
                    ToolTip="Duplicate">
                <Image Source="/Images/icons8-copy-48.png" />
            </Button>


            <ToggleButton
                    IsChecked="{Binding SplitEnabled}"
                    Visibility="{Binding CanSplit, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding SplitPercussionCommand}"
                    ToolTip="Split/Unsplit Percussion">
                <Image Source="/Images/icons8-drums-48.png" />
            </ToggleButton>


            <Button
                         Visibility="{Binding ShowRemove, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding RemoveCommand}"
                    ToolTip="Remove">
                <Image Source="/Images/icons8-delete-48.png" />
            </Button>

            <Button
                         Visibility="{Binding ShowRemoveAll, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding RemoveAllCommand}"
                    ToolTip="Remove All">
                <Image Source="/Images/icons8-trash-can-48.png" />
            </Button>
            <!--<Button
                    Height="30"
                    Command="{Binding RenameCommand}"
                    ToolTip="Rename ">
                <Image Source="/Images/icons8-rename-48.png" />
            </Button>-->

            <Separator/>

            <Button
                    Visibility="{Binding ShowReset, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding ResetCommand }"
                    ToolTip="Reset">
                <Image Source="../../Images/icons8-refresh-48.png" />
            </Button>
            
            <Button
                    Visibility="{Binding ShowResetAll, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding ResetAllCommand }"
                    ToolTip="Reset all">
                <Image Source="../../Images/icons8-refresh-all-48.png" />
            </Button>


            <Button
                    Visibility="{Binding ShowTrim, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding TrimCommand }"
                    ToolTip="Trim cloned/percussion tracks">
                <Image Source="../../Images/icons8-trim-48.png" />
            </Button>

            <!--<Button
                    Height="30"
                    Command="{Binding TrimAllCommand }"
                    ToolTip="Trim all">
                <Image Source="../../Images/icons8-trim-chords.png" />
            </Button>-->

            <!--<Button
                    ToolTip="Filters tracks to show only those matching it"
                    Command="{Binding ToggleFilterCommand}"
                    Height="25"
                    Visibility="{Binding IsFilterNotApplied, Converter={StaticResource BoolToVisibilityConverter}}">
                <Image Source="../../Images/icons8-filter-48.png"/>
            </Button>

            <Button
                    ToolTip="Clears the tracks filter"
                    Command="{Binding ClearFilterCommand}"
                    Height="25"
                    Visibility="{Binding IsFilterApplied, Converter={StaticResource BoolToVisibilityConverter}}" >
                <Image Source="../../Images/icons8-clear-filter-48.png" />
            </Button>-->

            <Separator/>

            <ToggleButton
                    IsChecked="{Binding ShowSettings}"
                    Height="30"
                    Command="{Binding ToggleSettingsCommand}"
                    ToolTip="Show/hide settings">
                <Image Source="../../Images/icons8-tune-48.png" />
            </ToggleButton>
            
            <!--<ToggleButton
                    IsChecked="{Binding ShowEnsembleOptions}"
                    Height="30"
                    Command="{Binding ToggleEnsembleCommand }"
                    ToolTip="Show/hide FFXIV ensemble options"
                    Visibility="{Binding LoggedIn, Converter={StaticResource BoolToVisibilityConverter}}">
                <Image Source="../../Images/ffxiv.ico" />
            </ToggleButton>-->

            <Button
                    Visibility="{Binding LoggedIn, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding AutoPopulateCommand }"
                    ToolTip="Autofill">
                <Image Source="../../Images/icons8-form-48.png" />
            </Button>


            <Button
                Visibility="{Binding LoggedIn, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    ToolTip="Show FFXIV Characters">
                <Image Source="../../Images/ffxiv.ico" Height="25" Width="20">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseLeftButtonDown">
                            <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding ShowCharactersPopupCommand}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Image>

            </Button>

            <Button
                    Visibility="{Binding LoggedIn, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding ToggleInstrumentsCommand }"
                    ToolTip="Switch in-game instruments">
                <Image Source="../../Images/icons8-cello-48.png" />
            </Button>

            <Button
                    Visibility="{Binding LoggedIn, Converter={StaticResource BoolToVisibilityConverter}}"
                    Height="30"
                    Command="{Binding CloseInstrumentsCommand }"
                    ToolTip="Close in-game instruments">
                <Image Source="../../Images/icons8-cello-close-48.png" />
            </Button>

        </ToolBar>



        
        <StackPanel VerticalAlignment="Stretch" Height="400" Background="#FF151F27" Visibility="{Binding SpinnerVisible, Converter={StaticResource BoolToVisibilityConverter}}">
            <Label FontSize="11"     FontWeight="SemiBold" Foreground="#90F0F6FF" Content="{Binding StatusText}"/>
            <StackPanel VerticalAlignment="Stretch"   HorizontalAlignment="Left" Margin="0,5,0,0" >
                <local:SpinnerControl></local:SpinnerControl>
            </StackPanel>
        </StackPanel>


        
        <DataGrid
                            Visibility="{Binding SpinnerVisible, Converter={StaticResource InverseBoolToVisibilityConverter}}"
                            FontSize="10"
                           x:Name="tracks"
                              Height="500"
  
            RowHeight="35"
                            CanUserResizeColumns="True"
                            HeadersVisibility="Column"
                            CanUserReorderColumns="False"
                            CanUserResizeRows="False"
            EnableRowVirtualization="False"
            EnableColumnVirtualization="False"
           VirtualizingPanel.IsVirtualizing="False"
                            SelectionMode="Extended"
                            IsReadOnly="True"
                            AutoGenerateColumns="False"
                            Background="#FF151F27"
                            Foreground="#E0727683"
                            GridLinesVisibility="None"
                            ItemsSource="{Binding Tracks, IsAsync=True}"
 
                            ScrollViewer.CanContentScroll="True" 
                            ScrollViewer.VerticalScrollBarVisibility="Auto"
                            ScrollViewer.HorizontalScrollBarVisibility="Auto">


            <DataGrid.Resources>
 

                <ResourceDictionary>

                    <local:VisibileBinding x:Key="EnsembleVisibleBindingProxy" Visible="{Binding ShowEnsembleOptions}"   />


                    <local:VisibileBinding x:Key="SettingsVisibleBindingProxy" Visible="{Binding ShowSettings}"   />


                    
                    
                    <Style x:Key="{x:Type DataGridCell}" TargetType="{x:Type DataGridCell}">
                        <!--<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></Setter>-->
                        <Setter Property="Background" Value="{x:Null}" />
                        <Setter Property="Margin" Value="5,2,0,0"></Setter>
                        <Setter Property="Padding" Value="0,0,0,0"></Setter>
                        <Setter Property="BorderBrush" Value="{x:Null}" />
    
                        <Style.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="#E0727683" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Foreground" Value="#90F0F6FF"></Setter>
                                <Setter Property="Background" Value="{x:Null}" />
                                <Setter Property="BorderBrush" Value="{x:Null}" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>

                    <Style TargetType="{x:Type DataGridRow}">
                
                        <Setter Property="IsEnabled" Value="{Binding Enabled}"></Setter>
                        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></Setter>
                        <Setter Property="Margin" Value="0,2,0,0"></Setter>
                        <Setter Property="Padding" Value="0,0,0,0"></Setter>
                        <Setter Property="MinHeight" Value="20"></Setter>
                        <Setter Property="Foreground" Value="#d0969cb0"></Setter>
                        <Setter Property="Background" Value="{x:Null}" />
                        <Setter Property="BorderBrush" Value="{x:Null}" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsSplit}" Value="True">
                                <Setter Property="Background" Value="#20FFFF00" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Cloned}" Value="True">
                                <Setter Property="Background" Value="#2046b46a" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Muted}" Value="True">
                                <Setter Property="Background" Value="#30480000" />
                            </DataTrigger>

                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="#E0727683" />
                                <Setter Property="Background" Value="#2031697e" />
                            </Trigger>

                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="#405E83A0" />
                                <Setter Property="BorderBrush" Value="{x:Null}" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>

                    <!--<ContextMenu x:Key="rowMenu">

                        <ContextMenu.Items>

                            <MenuItem 
                            Visibility="{Binding ShowMenuItems, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}"
                            IsCheckable="True" 
                            IsChecked="{Binding Muted, UpdateSourceTrigger=PropertyChanged}"
                             Command="{Binding MuteCommand}"  
                            Header="Muted"/>


                            <MenuItem 
                        Visibility="{Binding HasChanged, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}" 
                        Command="{Binding ResetCommand }"
                            Header="Reset"/>


                            <MenuItem 
                                Visibility="{Binding Path=DataContext.AllNotMuted, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Converter={StaticResource BoolToVisibilityConverter}}" 
                             Command="{Binding Path=DataContext.MuteAllCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}}"  
                            Header="Mute All"/>

                            <MenuItem 
                            Visibility="{Binding Path=DataContext.AnyMuted, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Converter={StaticResource BoolToVisibilityConverter}}" 
                             Command="{Binding Path=DataContext.UnmuteAllCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}}"  
                            Header="Unmute All"/>

                            <MenuItem 
                        Visibility="{Binding Path=DataContext.HasChanged, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Converter={StaticResource BoolToVisibilityConverter}}" 
                        Command="{Binding Path=DataContext.ResetAllCommand , RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}}"
                            Header="Reset All"/>

                        </ContextMenu.Items>
                    </ContextMenu>-->

                </ResourceDictionary>
            </DataGrid.Resources>

            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow" BasedOn="{StaticResource {x:Type DataGridRow}}">
                    <!--<Setter Property="ToolTip">
                        <Setter.Value>
                            <TextBlock Text="{Binding ToolTipText}" />
                        </Setter.Value>
                    </Setter>-->
                    <!--<Setter Property="ContextMenu" Value="{StaticResource rowMenu}" />-->
                </Style>
            </DataGrid.RowStyle>

            <DataGrid.Columns>

                <DataGridTemplateColumn  CanUserSort="False" Header="">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal" Margin="-5,-10,-30,0">
                                <!--<Image Margin="10,-8,0,0" Height="14" ToolTip="{Binding ToolTipText}" Source="../../Images/icons8-view-details-48.png" />-->

                                <Image ToolTip="{Binding ToolTipText}" Margin="10,0,0,0" Height="20"  Visibility="{Binding IsPercussion, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}"  Source="../../Images/icons8-drums-48.png" />
                                <Image ToolTip="{Binding ToolTipText}" Margin="10,0,0,0" Height="20" Visibility="{Binding IsPercussion, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource InverseBoolToVisibilityConverter}}"  Source="../../Images/icons8-piano-50.png" />

                                <!--<Image Margin="10,-8,0,0" Height="14" ToolTip="Track Is Muted" Visibility="{Binding ShowMuted, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}"  Source="../../Images/icons8-mute-48.png" />
                                <Image Margin="10,-8,0,0" Height="14" ToolTip="Track Is Playing" Visibility="{Binding ShowSpeaker, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}"  Source="../../Images/icons8-speaker-48.png" />-->
                            </StackPanel>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

  
     
                                
                    <DataGridTextColumn 
                                    CanUserSort="False"
                                     IsReadOnly="True"
                                    Binding="{Binding No}"
                                    ClipboardContentBinding="{x:Null}">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="Margin" Value="-5,4,0,0" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                    <DataGridTextColumn.HeaderTemplate>
                        <DataTemplate>
                            <TextBlock  Text="{Binding DataContext.Header, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}}"/>
                        </DataTemplate>
                    </DataGridTextColumn.HeaderTemplate>

                </DataGridTextColumn>

    

                <DataGridTextColumn
                                    CanUserSort="False"
                                     IsReadOnly="True"
                                    Binding="{Binding Title}"
                                    ClipboardContentBinding="{x:Null}"
                                    Header="Title">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="Margin" Value="0,4,0,0" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>

                </DataGridTextColumn>




                <!--<DataGridTextColumn
                                    CanUserSort="False"
                                     IsReadOnly="True"
                                    Binding="{Binding Instrument}"
                                    ClipboardContentBinding="{x:Null}"
                                    Header="Instrument">

                </DataGridTextColumn>-->


                <DataGridTemplateColumn CanUserSort="False" Header="Highest" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibilityConverter}, Source={StaticResource SettingsVisibleBindingProxy}}">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>

                            <StackPanel Orientation="Horizontal" Visibility="{Binding ShowSettings, Converter={StaticResource BoolToVisibilityConverter}}">
                                                
                                                <CheckBox
                                    IsEnabled="{Binding ChordSettingsEnabled}"
                                                     Foreground="#FF727683"
                                            Margin="0,4,0,0"
                                            IsChecked="{Binding HighestOnly}" 
                                                             FontSize="10" >
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="Checked">
                                            <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding HighestOnlyCheckedCommand}"/>
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="Unchecked">
                                            <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding HighestOnlyUncheckedCommand}"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </CheckBox>

                            </StackPanel>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>


                <DataGridTemplateColumn CanUserSort="False" Header="Play All" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibilityConverter}, Source={StaticResource SettingsVisibleBindingProxy}}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>

                            <StackPanel Orientation="Horizontal" Visibility="{Binding ShowSettings, Converter={StaticResource BoolToVisibilityConverter}}">

                                <CheckBox
                                                               IsEnabled="{Binding ChordSettingsEnabled}"
                                                     Foreground="#FF727683"
                                            Margin="0,4,0,0"
                                            IsChecked="{Binding PlayAll}" 
                                                             FontSize="10" >
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="Checked">
                                            <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding PlayAllCheckedCommand}"/>
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="Unchecked">
                                            <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding PlayAllUncheckedCommand}"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </CheckBox>

                            </StackPanel>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>


                <DataGridTemplateColumn CanUserSort="False" Header="Max Notes" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibilityConverter}, Source={StaticResource SettingsVisibleBindingProxy}}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>


                            <local:SpinButton 
                                Visibility="{Binding ShowSettings, Converter={StaticResource BoolToVisibilityConverter}}"
                            Margin="0,5,0,0"
                            Enabled="{Binding ReduceMaxNotesEnabled}"
                            MinValue="2" 
                            MaxValue="8" 
                            Value="{Binding ReduceMaxNotes, Mode=TwoWay}" 
                            Increment="1" 
                            Height="20" 
                            Width="60" 
                            >
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="ValueChanged">
                                        <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding MaxNotesChangedCommand}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </local:SpinButton>



                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>




                                <!--<DataGridTemplateColumn CanUserSort="False" Header="Ensemble" >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>

                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>-->

                <DataGridTemplateColumn  CanUserSort="False" Header="Time Offset" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibilityConverter}, Source={StaticResource SettingsVisibleBindingProxy}}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <local:SpinButton 
                                               Visibility="{Binding ShowSettings, Converter={StaticResource BoolToVisibilityConverter}}"
                                Margin="0,5,0,0"
                                                Enabled="True"
                                                ToolTip="Shifts track playback time backward/forward in ms"
                                                MinValue="-1000" 
                                                MaxValue="1000" 
                                                Value="{Binding TimeOffset, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                                Increment="10">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="ValueChanged">
                                        <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding TimeOffsetChangedCommand }"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </local:SpinButton>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>

                </DataGridTemplateColumn>
                
                <DataGridTemplateColumn   CanUserSort="False" Header="Key Offset" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibilityConverter}, Source={StaticResource SettingsVisibleBindingProxy}}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <local:SpinButton 
                                               Visibility="{Binding ShowSettings, Converter={StaticResource BoolToVisibilityConverter}}"
                                Margin="0,5,0,0"
                                                Enabled="True"
                                                ToolTip="Shifts track key backward forward"
                                                MinValue="-48" 
                                                MaxValue="48" 
                                                Value="{Binding KeyOffset, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                                Increment="1">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="ValueChanged">
                                        <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding KeyOffsetChangedCommand }"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </local:SpinButton>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>

                </DataGridTemplateColumn>

                <DataGridTemplateColumn  CanUserSort="False" Header="Octave Offset" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibilityConverter}, Source={StaticResource SettingsVisibleBindingProxy}}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <local:SpinButton 
                                Visibility="{Binding ShowSettings, Converter={StaticResource BoolToVisibilityConverter}}"
                                Margin="5,5,0,0"
                                                Enabled="True"
                                                ToolTip="Shifts track octave backward/forward"
                                                MinValue="-4" 
                                                MaxValue="4" 
                                                Value="{Binding OctaveOffset, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                                Increment="1">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="ValueChanged">
                                        <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding OctaveOffsetChangedCommand }"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </local:SpinButton>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>


                <DataGridTemplateColumn CanUserSort="False" Header="Instrument" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibilityConverter}, Source={StaticResource EnsembleVisibleBindingProxy}}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>

                            <StackPanel IsEnabled="{Binding PopulateFromPlaylist}" Visibility="{Binding ShowInstrument, Converter={StaticResource BoolToVisibilityConverter}}">


                                <Image  Source="{Binding SelectedInstrumentImage}" ToolTip="{Binding SelectedInstrumentName}" Width="30" Height="30" >
                                    <ToolTipService.InitialShowDelay>100</ToolTipService.InitialShowDelay>
                                    <ToolTipService.ShowDuration>2000</ToolTipService.ShowDuration>
                                    <Image.Style>
                                        <Style TargetType="{x:Type Image}">
    
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="False">
                                                    <Setter Property="Opacity" Value="0.7" />
                                                </Trigger>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Opacity" Value="1" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseLeftButtonDown">
                                            <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding InstrumentSelectedCommand }"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </Image>
                            </StackPanel>
               
             


                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                
                <!--<DataGridTemplateColumn CanUserSort="False" Header="Ensemble Instrument" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibilityConverter}, Source={StaticResource EnsembleVisibleBindingProxy}}" >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            
                                    <ComboBox
                                                        Width="95"
                                     Margin="0,0,0,0"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Top"
                                    ItemsSource="{Binding Instruments, UpdateSourceTrigger=PropertyChanged}"
                                        SelectedItem="{Binding SelectedInstrument}">

                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="SelectionChanged">
                                                <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding EnsembleInstrumentChangedCommand}"/>
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </ComboBox>


                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>-->


                <DataGridTemplateColumn CanUserSort="False" Header="Assign To" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibilityConverter}, Source={StaticResource EnsembleVisibleBindingProxy}}" >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <StackPanel>

                                <Label FontSize="10" Foreground="#d0969cb0" Content="{Binding SelectedMember}" Visibility="{Binding ShowMemberLabel, Converter={StaticResource BoolToVisibilityConverter}}"/>
                                <ComboBox
                
                      Visibility="{Binding ShowMembers, Converter={StaticResource BoolToVisibilityConverter}}"
                                                     FontSize="10"
                                 Margin="0,5,0,0"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Top"
                                ItemsSource="{Binding EnsembleMembers, UpdateSourceTrigger=PropertyChanged}"
                                    SelectedItem="{Binding SelectedMember}">

                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="SelectionChanged">
                                            <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding EnsembleMemberChangedCommand}"/>
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="MouseDoubleClick">
                                            <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding ClearEnsembleMemberCommand}"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>

      
                                </ComboBox>
                            </StackPanel>
   

                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>


            </DataGrid.Columns>

            <!--<DataGrid.ContextMenu>

                <ContextMenu>
                    <MenuItem 
                        Visibility="{Binding AllNotMuted, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}" 
                             Command="{Binding MuteAllCommand}"  
                            Header="Mute All"/>

                    <MenuItem 
                            Visibility="{Binding AnyMuted, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}" 
                             Command="{Binding UnmuteAllCommand}"  
                            Header="Unmute All"/>

                    <MenuItem 
                        Visibility="{Binding HasChanged, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}}" 
                        Command="{Binding ResetAllCommand }"
                            Header="Reset All"/>
                </ContextMenu>

            </DataGrid.ContextMenu>-->
        </DataGrid>

    </StackPanel>


</StackPanel>